/*
Copyright 2017 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto2";



import "seurat/api/math.proto";

package seurat.api.proto;

// Interpretation of depth values.
//
// Keep in sync with seurat::base::ProjectiveCamera::DepthType
enum DepthType {
  // Unspecified depth type.
  DEPTH_TYPE_UNSPECIFIED = 0;
  // Depths are the window-space Z coordinate (Z/W, as in Z buffer from GL) in
  // the range [0, 1].
  DEPTH_TYPE_WINDOW_Z = 1;
  // Depths are the negated eye-space Z coordinate in the range [0, inf).
  DEPTH_TYPE_EYE_Z = 2;
  // Depths are distances along a normalized ray (unit length direction vector)
  // through a pixel center. In other words, this is the distance between the
  // point and the origin in eye-space.
  DEPTH_TYPE_RAY_DEPTH = 3;
};


// Describes an arbitrary camera.
message Camera {
  oneof camera {
    ProjectiveCamera projective = 1;
  }
}

// An OpenGL style projective camera. The projection can be either perspective
// (with support for infinite far clip planes) or orthographic. The coordinate
// system is left-handed. In eye-space, the camera is looking down the negative
// Z-axis, the Y-axis points up and the X-axis points to the right.
//
// Proto for seurat::base::ProjectiveCamera.
message ProjectiveCamera {
  // Required. Size of the image ("sensor") in pixels.
  optional Vector2i image_size = 1;

  // Required. The matrix that transforms eye coordinates to clip coordinates.
  optional Matrix4f clip_from_eye = 2;

  // Required. The matrix that transforms eye coordinates to world coordinates;
  // in other words the camera pose matrix.
  optional Matrix4f world_from_eye = 3;

  // Required. The way this camera interprets depth values.
  optional DepthType depth_type = 4 [ default = DEPTH_TYPE_UNSPECIFIED ];
}
