/*
Copyright 2017 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto2";



package seurat.api.proto;

// Describes an LDI.
message Ldi {
  oneof ldi {
    LdiFile ldi_file = 1;
    DepthImageFile depth_image_file = 2;
  }
}

// Describes a four channel LDI (deep image) stored as a file.
//
// The first three channels can represent arbitrary data. The fourth channel is
// always interpreted as an alpha channel (0.0 = transparent, 1.0 = opaque).
// Channel mappings are available to map channels in the file to channels in the
// resulting LDI.
//
// Deep OpenEXR 2.0 is currently the only supported file format. The function
// WriteDeepExr() in api/ldi_exporter.h can be used to write LDIs in this format.
message LdiFile {
  // FileSystem path of the file.
  optional string path = 1;

  // Channel mappings for the resulting image.  Each channel's name can be
  // specified independently.
  //
  // In addition, these reserved channel names exist:
  // * "R", "G", "B", "A": the respective color channel in the input image.
  // " "CONSTANT_ZERO": the channel is filled with a constant 0.0f.
  // * "CONSTANT_ONE": the channel is filled with a constant 1.0f.
  optional string channel_0 = 2 [default = "R"];
  optional string channel_1 = 3 [default = "G"];
  optional string channel_2 = 4 [default = "B"];
  optional string channel_alpha = 5 [default = "A"];
  optional string channel_depth = 6 [default = "Z"];
}

// Describes a depth image (RGB+D) stored as separate color and depth files on a
// FileSystem.
message DepthImageFile {
  // Color image as a file.
  optional Image4File color = 1;

  // Depth image as a file.
  optional Image1File depth = 2;
}

// Describes a four channel image stored as a file.
//
// The first three channels can represent arbitrary data. The fourth channel is
// always interpreted as an alpha channel (0.0 = transparent, 1.0 =
// opaque). Channel mappings are available to map channels in the file to
// channels in the resulting image.
message Image4File {
  // FileSystem path of the file.
  optional string path = 1;

  // Channel mappings for the resulting image.  Each channel's name can be
  // specified independently.
  //
  // In addition, these reserved channel names exist:
  // * "R", "G", "B", "A": the respective color channel in the input image.
  // " "CONSTANT_ZERO": the channel is filled with a constant 0.0f.
  // * "CONSTANT_ONE": the channel is filled with a constant 1.0f.
  optional string channel_0 = 2 [default = "R"];
  optional string channel_1 = 3 [default = "G"];
  optional string channel_2 = 4 [default = "B"];
  optional string channel_alpha = 5 [default = "A"];
}

// Describes an single channel image stored as a file on a FileSystem.
message Image1File {
  // FileSystem path of the file.
  optional string path = 1;

  // Channel mapping for the resulting image.
  //
  // These reserved channel names also exist:
  // * "R", "G", "B", "A": the respective color channel in the input image.
  // " "CONSTANT_ZERO": the channel is filled with a constant 0.0f.
  // * "CONSTANT_ONE": the channel is filled with a constant 1.0f.
  optional string channel_0 = 2 [default = "Z"];
}
